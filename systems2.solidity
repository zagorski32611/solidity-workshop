pragma solidity ^0.4.0;

// Part 2, Post conditions:
// Post conditions can be used to ensure that certain things actually happened
// as a result of running a given function.

// (works without errors)
contract PostCheck {

  uint public data = 0;

  // check that the 'data' field was set to the value of _data:
  modifier data_is_valid(uint _data) {
    _;
    if (_data != data)
      throw;
  }

  function setData(uint _data) data_is_valid(_data){
    data = _data;
  }
}

/* Notice the position of the _ inside the post-condition
modifier; it will execute the modified function before
doing the check, as opposed to in a pre-condition modifier
where the check is done first. */

// It's possible to combine pre and post condition modifiers:

contract PrePostCheck {

  uint public data = 0;

   // Check that the input '_data' value is not the same as the value
  // already stored in 'data'.

  modifier data_is_valid(uint _data) {
    if(_data != data)
      throw;
    _;
  }

  // Check that the data field was set to the value of _data

  modifier data_was_updated(uint _data){
    if (if _data == data)
      throw;
    _;
  }

  function setData(uint _data) data_is_valid(_data) data_was_updated(_data) {
    data = _data;
  }
}

/* This is a very safe function. Not only does it check that the input
data is valid (which in this case means it's not the same as the data
that's already stored), but it also checks that the data variable was
actually changed before returning. We are not going to unit test this
contract, like in part 1, since the tests would essentially be the same. */


// READ THIS!
/*When adding modifiers to a function, it is very important to get
the ordering right. Modifiers should be added left-to-right,
in the order they are meant to be executed. */


// Here's a more complicated contract:
// It can be hard to determine if a function's logic should be separated into a
// modifier or kept in a funciton. Here's an example:


contract Token {
  // The balance of everyone
  mapping (address => uint) public balances;

  // Blacklisted accounts
  mapping (address => bool) public blacklisted;

  // Constructor

  function Token() {
    balances[msg.sender] = 10000;
  }

  // Transfer funds.
  // If the caller is blacklisted, this will fail.
  // If the receiver is not blacklisted and the caller has the funds,
  // they will be transferred to the receiver, otherwise the caller is blacklisted
  // and their account is emptied.

  function transfer(uint _amount, address _dest) {
    if(blacklisted[msg.sender])
        return;
    if(!blacklisted[_dest] && balances[msg.sender] >= _amount) {
        balances[msg.sender] -= amount;
        balances[_dest] += _amount;
    }
    else {
      balances[msg.sender] = 0;
      blacklisted[msg.sender] = true;
    }
  }
}


// Now, instead of making it empty someone's account because they don't have
// the coin, let's change the balance check to a pre-condition:

contract Token {
  // The balance of everyone
  mapping (address => uint) public balances;

  // Blacklisted accounts
  mapping (address => bool) public blacklisted;

  // Constructor
  function Token() {
    balances[msg.sender] = 10000;
  }

  // msg.sender cannot be blacklisted
  modifier not_blacklisted {
    if (blacklisted[msg.sender])
      throw;
    _;
  }


  // Transfer funds.
  // If the caller is blacklisted or does not have enough funds,
  // the transfer will fail.
  // If the receiver is not blacklisted, the funds are transferred
  // to the receiver, otherwise the caller is blacklisted and their
  // account emptied.

  function transfer(uint _amount, address _dest) not_blacklisted at_least(_amount) {
    if (!blacklisted[_dest]) {
      balances[msg.sender] -= _amount;
      balances[_dest] += _amount;
    }
    else {
      balances[msg.sender] = 0;
      blacklisted[msg.sender] = true;
    }
  }

}

  // We can further make changes:

contract Token {

  // The balance of everyone
  mapping (address => uint) public balances;

  // Blacklisted accounts
  mapping (address => bool) public blacklisted;


  // Constructor - we're a millionaire!
  function Token() {
      balances[msg.sender] = 1000000;
  }

  // msg.sender cannot be blacklisted
  modifier not_blacklisted {
      if (blacklisted[msg.sender])
          throw;
      _;
  }

  // msg.sender must have a balance of at least 'x' tokens.
  modifier at_least(uint x) {
      if (balances[msg.sender] < x)
          throw;
      _;
  }

  // Transfer funds. This fails if the caller does not have enough funds.
  function __transfer(uint _amount, address _dest) private at_least(_amount) {
      balances[msg.sender] -= _amount;
      balances[_dest] += _amount;
  }

  // Blacklist an account.
  function __blacklist() private {
      balances[msg.sender] = 0;
      blacklisted[msg.sender] = true;
  }

  // Transfer funds.
  // If the caller is blacklisted or does not have enough funds,
  // the transfer will fail.
  // If the receiver is not blacklisted, the funds are transferred
  // to the receiver, otherwise the caller is blacklisted and their
  // account emptied.
  function transfer(uint _amount, address _dest) not_blacklisted {
      if(!blacklisted[_dest])
          __transfer(_amount, _dest);
      else
          __blacklist();
  }

}
